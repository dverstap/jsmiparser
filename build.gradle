apply from: "./libraries.gradle"

buildscript {
  repositories { mavenCentral() }
}

def _hasGeneratedSources(project) {
  for (ss in project.sourceSets) {
    for (f in ss.allJava) {
      //println(f.path)
      if (f.path.contains('/generated-src/')) {
        return true
      }
    }
  }
  return false
}

def determineIdeaExcludeDirs(project) {
  def result = []
  if (_hasGeneratedSources(project)) {
    for (f in project.buildDir.listFiles()) {
      //println(f)
      if (f.name.equals("generated-src")) {
        //println("Excluding generated-src")
      } else {
        result += f
      }
    }
  } else {
    result = ['build', '.gradle']
  }
  return result
}


allprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'
  apply plugin: 'idea'
  apply plugin: 'maven'
  apply plugin: 'signing'

  group = 'org.jsmiparser'

  // set the to-be-released version with -Pversion=
  if (version == DEFAULT_VERSION)
    version = 'SNAPSHOT'

  sourceCompatibility = 1.5
  targetCompatibility = 1.5

  repositories {
    mavenCentral()
  }

}

subprojects { subproject ->
  jar {
    manifest.attributes['Implementation-Title'] = subproject.name
    manifest.attributes['Implementation-Version'] = subproject.version
  }

  configurations {
    all {
      resolutionStrategy {
        failOnVersionConflict()
      }

    }
    configurations {
      all*.exclude group: 'commons-logging', module: 'commons-logging'
    }

  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  task testsJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.output
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
  }

  artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
    archives testsJar
  }

  signing {
    required = { gradle.taskGraph.hasTask("uploadArchives") && !version.endsWith("SNAPSHOT") }
    sign configurations.archives
  }

  dependencies {
    compile libraries.slf4j_api
    testCompile libraries.junit
    testRuntime libraries.slf4j_log4j12
    testRuntime libraries.slf4j_jcl_over_slf4j
    testRuntime libraries.log4j
  }

  idea {
    module {
      // These settings make IntelliJ compile the class files to the same directories as gradle:
      inheritOutputDirs = false
      outputDir = sourceSets.main.output.classesDir
      testOutputDir = sourceSets.test.output.classesDir
    }
  }

  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
          authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

        pom {
          version project.version
        }

        pom.project {
          name project.name
          packaging 'jar'
          description 'A Java 1.5 SNMP mib parser that builds a complete cross-referenced symbol table.'
          url 'http://www.jsmiparser.org/'

          scm {
            url 'https://github.com/dverstap/jsmiparser'
            connection 'scm:git://github.com/dverstap/jsmiparser.git'
            developerConnection 'scm:git@github.com:dverstap/jsmiparser.git'
          }

          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution 'repo'
            }
          }

          developers {
            developer {
              id 'dverstap'
              name 'Davy Verstappen'
              email 'davy@jsmiparser.org'
            }
          }
        }
      }
    }
  }

}

idea {
  project {
    languageLevel = '1.5'
    ipr {
      withXml { provider ->
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
      }
      beforeMerged { project ->
        project.modulePaths.clear()
      }
    }
  }
}


project('jsmiparser-util') {

  dependencies {
    compile libraries.commons_beanutils
    compile libraries.commons_collections
  }

}


project('jsmiparser-api') {


  apply plugin: 'antlr'

  idea {
    module {
      // excludeDirs must be set after the antlr plugin has been applied,
      // otherwise the generated sources will not yet have been put in the java sourceSet:
      excludeDirs = determineIdeaExcludeDirs(project)
    }
  }

  dependencies {
    antlr libraries.antlr

    compile project(':jsmiparser-util')
    compile libraries.antlr // needed because otherwise there is no antlr dependency in the generated pom.xml

    testCompile libraries.spring_core
    testCompile libraries.spring_test

    testRuntime libraries.spring_beans
    testRuntime libraries.spring_context
  }

}


project('jsmiparser-codegen') {
  //evaluationDependsOn(':jsmiparser-api')

  dependencies {
    compile project(':jsmiparser-api')
    compile libraries.codemodel

    testCompile project(':jsmiparser-util').sourceSets.test.output
  }

}


project('jsmiparser-gradle') {

  dependencies {
    compile project(':jsmiparser-codegen')
    compile gradleApi()
    //groovy localGroovy()

    testCompile project(':jsmiparser-util').sourceSets.test.output
  }

}



task stestInit(dependsOn: [':jsmiparser-util:install', ':jsmiparser-api:install', ':jsmiparser-codegen:install', ':jsmiparser-gradle:install']) {}

task stest(type: GradleBuild, dependsOn: stestInit) {
  dir = 'jsmiparser-test'
  tasks = ['test']
}

task stestClean(type: GradleBuild, dependsOn: stestInit) {
  dir = 'jsmiparser-test'
  tasks = ['clean', 'test']
}
